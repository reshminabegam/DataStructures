'''Stack and Queue'''

#stack using sll
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Stack:
    def __init__(self):
        self.top=None
    def push(self,data):
        if self.top is None: 
            self.top=Node(data)
        else:
            newnode=Node(data)  
            newnode.next=self.top
            self.top=newnode
    def pop(self):
        if self.top is None:
            return "stack is empty"
        else:
            temp=self.top
            val=temp.data 
            self.top=temp.next
            del(temp)
    def isempty(self):
        if self.top is None:
            return "stack is empty"
        else:
            return "have an elements"
    def peek(self):
        if self.top is None:
            return None
        else:
            return self.top.data
        
    def display(self):
        temp=self.top
        while temp is not None:
            print(temp.data)
            temp=temp.next
    
s=Stack()
s.push(1)
s.push(2)
s.push(3)
s.push(4)
s.push(5)
s.pop()
print('my top element is:',s.peek())

s.display()





#queue using sll
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class queue:
    def __init__(self):
        self.front=None
        self.rear=None
    def enqueue(self,data):
        if self.front is None:
            self.front=Node(data)
            self.rear=self.front
        else:
            newnode=Node(data)
            newnode.next=self.rear.next 
            self.rear.next=newnode
            self.rear=newnode
    def dequeue(self):
        if self.front is None: 
            return "queue is empty"
        else:
            temp=self.front
            self.front=temp.next
            val=temp.data
            del(temp)
            return val
    def display(self):
            temp=self.front
            while temp is not None:
                print(temp.data)
                temp=temp.next
q=queue()
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.enqueue(4)
q.enqueue(5)
q.display()
print('after dequeue')
q.dequeue()
q.display()





#circular queue
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularQueue:
    def __init__(self):
        self.front = None
        self.rear = None

    def enqueue(self, item):
        new_node = Node(item)
        if self.front is None:
            self.front = self.rear = new_node
            self.rear.next = self.front
        else:
            self.rear.next = new_node
            self.rear = new_node
            self.rear.next = self.front

    def dequeue(self):
        if self.front is None:
            print("Queue is empty")
        elif self.front == self.rear:
            self.front = self.rear = None
        else:
            self.front = self.front.next
            self.rear.next = self.front

    def display(self):
        if self.front is None:
            print("Queue is empty")
        else:
            current = self.front
            while True:
                print(current.data, end=' ')
                current = current.next
                if current == self.front:
                    break
            print()


cq = CircularQueue()
cq.enqueue(1)
cq.enqueue(2)
cq.enqueue(3)
cq.enqueue(4)
cq.enqueue(5)
cq.display()
print('after dequeue')
cq.dequeue()
cq.display()
